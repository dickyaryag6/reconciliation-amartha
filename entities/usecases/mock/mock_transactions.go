// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	transactions "amartha-test/entities/transactions"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionUsecase is a mock of TransactionUsecase interface.
type MockTransactionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUsecaseMockRecorder
}

// MockTransactionUsecaseMockRecorder is the mock recorder for MockTransactionUsecase.
type MockTransactionUsecaseMockRecorder struct {
	mock *MockTransactionUsecase
}

// NewMockTransactionUsecase creates a new mock instance.
func NewMockTransactionUsecase(ctrl *gomock.Controller) *MockTransactionUsecase {
	mock := &MockTransactionUsecase{ctrl: ctrl}
	mock.recorder = &MockTransactionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUsecase) EXPECT() *MockTransactionUsecaseMockRecorder {
	return m.recorder
}

// DoReconciliation mocks base method.
func (m *MockTransactionUsecase) DoReconciliation(ctx context.Context, param transactions.DoReconciliationRequest) (transactions.DoReconciliationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoReconciliation", ctx, param)
	ret0, _ := ret[0].(transactions.DoReconciliationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoReconciliation indicates an expected call of DoReconciliation.
func (mr *MockTransactionUsecaseMockRecorder) DoReconciliation(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoReconciliation", reflect.TypeOf((*MockTransactionUsecase)(nil).DoReconciliation), ctx, param)
}
